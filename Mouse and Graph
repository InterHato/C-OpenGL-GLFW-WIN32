#include <GL/glew.h>
#include <GLFW/glfw3.h>
#include <math.h>
#include <iostream>

#define SCREEN_WIDTH 1280
#define SCREEN_HEIGHT 480
#define datasize  15


float data_ecg1[] = { 0.396568808f, 0.372911844f, 0.311059085f, 0.220346775f, 0.113525529f, 0.002200333f, -0.103284775f, -0.194218528f, -0.266285973f, -0.318075979f, -0.349670132f, -0.362640042f, -0.360047348f, -0.346207663f, -0.325440887f, -0.302062532f, -0.279400804f, -0.259695686f, -0.244098939f, -0.232674099f, -0.22470351f, -0.219410595f, -0.215971067f, -0.21370323f, -0.212069285f, -0.210675322f, -0.209271327 };
float data_ecg[] = { 0.0,0.2,0.3,0.6,0.7,0.8,0.3,0.2,0.6,0.7,0.7,0.8,0.3,0.3,0.2 };


static void cursorPositionCallback(GLFWwindow* window, double xpos, double ypos);
void cursorEnterCallback(GLFWwindow* window, int entered);
void mouseButtonCallback(GLFWwindow* window, int button, int action, int mods);
void scrollCallback(GLFWwindow* window, double xoffset, double yoffset);

void PlotECGData(int a_offset, int a_size, int a_offsetY, float a_scale);
void ECGDemo(int a_counter);
/// 

//runtimelineview
//runanalysisview
//eqvf





int main(void)
{
    GLFWwindow* window;

    // Initialize the library
    if (!glfwInit())
    {
        return -1;
    }

    // Create a windowed mode window and its OpenGL context
    window = glfwCreateWindow(SCREEN_WIDTH, SCREEN_HEIGHT, "Hello World", NULL, NULL);

    glfwSetCursorPosCallback(window, cursorPositionCallback);
    glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_NORMAL);

    glfwSetCursorEnterCallback(window, cursorEnterCallback);

    glfwSetMouseButtonCallback(window, mouseButtonCallback);
    glfwSetInputMode(window, GLFW_STICKY_MOUSE_BUTTONS, 1);

    glfwSetScrollCallback(window, scrollCallback);

    unsigned char pixels[16 * 16 * 4];
    memset(pixels, 0xff, sizeof(pixels));
    GLFWimage image;
    image.width = 16;
    image.height = 16;
    image.pixels = pixels;
    GLFWcursor* cursor = glfwCreateCursor(&image, 0, 0);
    glfwSetCursor(window, cursor); // set to null to reset cursor



    if (!window)
    {
        glfwTerminate();
        return -1;
    }

    // Make the window's context current
    glfwMakeContextCurrent(window);



    float l_counter = 0;
    // Loop until the user closes the window
    while (!glfwWindowShouldClose(window))
    {
        glClear(GL_COLOR_BUFFER_BIT);

        // Render OpenGL here

        double xpos, ypos;
        glfwGetCursorPos(window, &xpos, &ypos);
        ECGDemo(l_counter);
        // Swap front and back buffers
        glfwSwapBuffers(window);

        // Poll for and process events
        glfwPollEvents();
    }

    glfwTerminate();

    return 0;
}


///




static void cursorPositionCallback(GLFWwindow* window, double xpos, double ypos)
{
    std::cout << xpos << " : " << ypos << std::endl;
}

void cursorEnterCallback(GLFWwindow* window, int entered)
{
    if (entered)
    {
        std::cout << "Entered Window" << std::endl;
    }
    else
    {
        std::cout << "Left window" << std::endl;
    }
}

void mouseButtonCallback(GLFWwindow* window, int button, int action, int mods)
{
    if (button == GLFW_MOUSE_BUTTON_RIGHT && action == GLFW_PRESS)
    {
        std::cout << "Right button pressed" << std::endl;
    }
}

void scrollCallback(GLFWwindow* window, double xoffset, double yoffset)
{
    std::cout << xoffset << " : " << yoffset << std::endl;
}

void PlotECGData(int a_offset, int a_size, int a_offsetY, float a_scale)
{

    // space between samples
    const float l_space = 0.1;
    // inital position of the first vertex to render
    float l_pos = -1;
    // set line width
    glLineWidth(1.0f);
    glBegin(GL_LINE_STRIP);
    // set the color
    glColor4f(0.1f, 1.0f, 0.1f, 0.8f);
    for (int i = a_offset; i < a_size + a_offset; ++i)
    {
        const float l_data = data_ecg[i] + a_offsetY;
        glVertex3f(l_pos, l_data, 0.0f);
        l_pos += l_space;
    }
    glEnd();
}

void ECGDemo(int a_counter)
{
    const int l_dataSize = datasize;
    // Emulate the presence of multiple ECG leads (just for demo/ display purposes)
    PlotECGData(a_counter, l_dataSize, -1, 0.1f);

}


